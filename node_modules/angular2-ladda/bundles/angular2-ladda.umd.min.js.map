{"version":3,"sources":["ng://angular2-ladda/lib/ladda-config.ts","ng://angular2-ladda/lib/ladda.directive.ts","ng://angular2-ladda/lib/ladda.module.ts"],"names":["configAttributes","data-style","data-spinner-size","data-spinner-color","data-spinner-lines","LaddaConfig","config","Object","assign","this","Injectable","LaddaConfigArgs","LaddaDirective","el","nativeElement","attribute","configValue","getAttribute","value","toString","setAttribute","prototype","ngOnChanges","changes","ladda","loading","updateLadda","previousValue","disabled","updateDisabled","ngOnInit","_this","createLadda","setTimeout","ngOnDestroy","remove","wasLoading","stop","start","setProgress","Directive","args","selector","ElementRef","decorators","type","Inject","Optional","Input","LaddaModule","forRoot","ngModule","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"uTAOA,iBAKA,OALA,gBAOWA,EAA2D,CAClEC,aAAc,QACdC,oBAAqB,cACrBC,qBAAsB,eACtBC,qBAAsB,gBAG1BC,EAAA,WAEI,SAAAA,EAAYC,QAAA,IAAAA,IAAAA,EAAA,IACRC,OAAOC,OAAOC,KAAMH,GAE5B,2BALCI,EAAAA,sDAEuBC,KAGxBN,EALA,GCrBAO,EAAA,WAgBI,SAAAA,EAAYC,EAAiDP,GAGzD,GAFAG,KAAKI,GAAKA,EAAGC,cAERR,EAKL,IAAK,IAAIS,KAAaf,EAAkB,KAChCgB,EAAcV,EAAON,EAAiBe,IAE1C,GAAKC,IAIAP,KAAKI,GAAGI,aAAaF,GAAY,KAE9BG,EAAgC,iBAAhBF,EAA4BA,EAAYG,WAAaH,EACzEP,KAAKI,GAAGO,aAAaL,EAAWG,KAyDhD,OApDIN,EAAAS,UAAAC,YAAA,SAAYC,GACHd,KAAKe,QAIND,EAAQE,SACRhB,KAAKiB,YAAYH,EAAQE,QAAQE,eAGjCJ,EAAQK,UACRnB,KAAKoB,mBAIbjB,EAAAS,UAAAS,SAAA,WAAA,IAAAC,EAAAtB,KACIA,KAAKe,MAAQQ,EAAAA,OAAYvB,KAAKI,IAI9BoB,WAAU,WAASF,EAAKL,aAAY,IAAW,IAGnDd,EAAAS,UAAAa,YAAA,WACQzB,KAAKe,OACLf,KAAKe,MAAMW,UAIXvB,EAAAS,UAAAK,YAAR,SAAoBC,OAEZS,EAA+C,iBAAlBT,KAAgCA,EAEjE,KAH+C,iBAAjBlB,KAAKgB,WAA0BhB,KAAKgB,SAQ9D,OAJIW,GACA3B,KAAKe,MAAMa,OAGR5B,KAAKoB,iBAGXO,GACD3B,KAAKe,MAAMc,QAGa,iBAAjB7B,KAAKgB,SACZhB,KAAKe,MAAMe,YAAY9B,KAAKgB,UAI5Bb,EAAAS,UAAAQ,eAAR,WACIpB,KAAKI,GAAGe,SAAWnB,KAAKmB,8BAnF/BY,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,uDAPKC,EAAAA,kBACEhC,EAAeiC,WAAA,CAAA,CAAAC,KAeHC,EAAAA,OAAML,KAAA,CAACpC,IAAW,CAAAwC,KAAGE,EAAAA,+CAHjDC,EAAAA,MAAKP,KAAA,CAAC,2BACNO,EAAAA,SA6ELpC,EA3FA,GCAAqC,EAAA,WAIA,SAAAA,KAaA,OARkBA,EAAAC,QAAd,SAAsB5C,GAClB,MAAO,CACH6C,SAAUF,EACVG,UAAW,CACP,CAAEC,QAAShD,EAAaiD,SAAUhD,0BATjDiD,EAAAA,SAAQd,KAAA,CAAC,CACNe,aAAc,CAAE5C,GAChB6C,QAAc,CAAE7C,OAWpBqC,EAjBA","sourcesContent":["import {Injectable} from \"@angular/core\";\r\n\r\nexport type laddaStyle =\r\n    \"expand-left\" | \"expand-right\" | \"expand-up\" | \"expand-down\" |\r\n    \"contract\" | \"contract-overlay\" | \"zoom-in\" | \"zoom-out\" |\r\n    \"slide-left\" | \"slide-right\" | \"slide-up\" | \"slide-down\";\r\n\r\nexport abstract class LaddaConfigArgs {\r\n    style?: laddaStyle;\r\n    spinnerSize?: number;\r\n    spinnerColor?: string;\r\n    spinnerLines?: number;\r\n}\r\n\r\nexport let configAttributes: {[key: string]: keyof LaddaConfigArgs} = {\r\n    \"data-style\": \"style\",\r\n    \"data-spinner-size\": \"spinnerSize\",\r\n    \"data-spinner-color\": \"spinnerColor\",\r\n    \"data-spinner-lines\": \"spinnerLines\",\r\n};\r\n\r\n@Injectable()\r\nexport class LaddaConfig implements LaddaConfigArgs {\r\n    constructor(config: LaddaConfigArgs = {}) {\r\n        Object.assign(this, config);\r\n    }\r\n}\r\n","import {Directive, ElementRef, Input, OnInit, OnDestroy, OnChanges, SimpleChanges, Optional, Inject} from '@angular/core';\r\nimport {LaddaConfig, LaddaConfigArgs, configAttributes} from './ladda-config';\r\nimport {create as createLadda, LaddaButton} from 'ladda';\r\n\r\nexport type laddaValue = boolean | number | undefined | null;\r\n\r\n@Directive({\r\n    selector: '[ladda]'\r\n})\r\nexport class LaddaDirective implements OnInit, OnDestroy, OnChanges {\r\n    private el: HTMLButtonElement;\r\n    private ladda: LaddaButton;\r\n\r\n    @Input('ladda') loading: laddaValue;\r\n    @Input() disabled: boolean;\r\n\r\n    constructor(el: ElementRef, @Inject(LaddaConfig) @Optional() config: LaddaConfigArgs) {\r\n        this.el = el.nativeElement;\r\n\r\n        if (!config) {\r\n            return;\r\n        }\r\n\r\n        // apply default styles if they aren't overwritten by an attribute\r\n        for (let attribute in configAttributes) {\r\n            let configValue = config[configAttributes[attribute]];\r\n\r\n            if (!configValue) {\r\n                continue; // don't waste time reading the attribute\r\n            }\r\n\r\n            if (!this.el.getAttribute(attribute)) {\r\n                // attribute isn't set - apply the default config value\r\n                let value = (typeof configValue === \"number\") ? configValue.toString() : configValue;\r\n                this.el.setAttribute(attribute, value);\r\n            }\r\n        }\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (!this.ladda) {\r\n            return; // needed since ngOnChanges is called before ngOnInit\r\n        }\r\n\r\n        if (changes.loading) {\r\n            this.updateLadda(changes.loading.previousValue);\r\n        }\r\n\r\n        if (changes.disabled) {\r\n            this.updateDisabled();\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.ladda = createLadda(this.el);\r\n\r\n        // if the initial loading value isn't false, a timeout of 0 ms\r\n        // is necessary for the calculated spinner size to be correct.\r\n        setTimeout(() => { this.updateLadda(false); }, 0);\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        if (this.ladda) {\r\n            this.ladda.remove();\r\n        }\r\n    }\r\n\r\n    private updateLadda(previousValue: laddaValue): void {\r\n        let loading: boolean = typeof this.loading === 'number' || !!this.loading;\r\n        let wasLoading: boolean = typeof previousValue === 'number' || !!previousValue;\r\n\r\n        if (!loading) {\r\n            if (wasLoading) {\r\n                this.ladda.stop();\r\n            }\r\n\r\n            return this.updateDisabled();\r\n        }\r\n\r\n        if (!wasLoading) {\r\n            this.ladda.start();\r\n        }\r\n\r\n        if (typeof this.loading === 'number') {\r\n            this.ladda.setProgress(this.loading);\r\n        }\r\n    }\r\n\r\n    private updateDisabled(): void {\r\n        this.el.disabled = this.disabled;\r\n    }\r\n}\r\n","import {NgModule, ModuleWithProviders} from '@angular/core';\r\nimport {LaddaDirective} from './ladda.directive';\r\nimport {LaddaConfigArgs, LaddaConfig} from './ladda-config';\r\n\r\n@NgModule({\r\n    declarations: [ LaddaDirective ],\r\n    exports:      [ LaddaDirective ],\r\n})\r\nexport class LaddaModule {\r\n    public static forRoot(config: LaddaConfigArgs): ModuleWithProviders {\r\n        return {\r\n            ngModule: LaddaModule,\r\n            providers: [\r\n                { provide: LaddaConfig, useValue: config }\r\n            ]\r\n        };\r\n    }\r\n}\r\n"]}