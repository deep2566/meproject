(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('ladda')) :
    typeof define === 'function' && define.amd ? define('angular2-ladda', ['exports', '@angular/core', 'ladda'], factory) :
    (global = global || self, factory(global['angular2-ladda'] = {}, global.ng.core, global.ladda));
}(this, function (exports, core, ladda) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var   /**
     * @abstract
     */
    LaddaConfigArgs = /** @class */ (function () {
        function LaddaConfigArgs() {
        }
        return LaddaConfigArgs;
    }());
    /** @type {?} */
    var configAttributes = {
        "data-style": "style",
        "data-spinner-size": "spinnerSize",
        "data-spinner-color": "spinnerColor",
        "data-spinner-lines": "spinnerLines",
    };
    var LaddaConfig = /** @class */ (function () {
        function LaddaConfig(config) {
            if (config === void 0) { config = {}; }
            Object.assign(this, config);
        }
        LaddaConfig.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LaddaConfig.ctorParameters = function () { return [
            { type: LaddaConfigArgs }
        ]; };
        return LaddaConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LaddaDirective = /** @class */ (function () {
        function LaddaDirective(el, config) {
            this.el = el.nativeElement;
            if (!config) {
                return;
            }
            // apply default styles if they aren't overwritten by an attribute
            for (var attribute in configAttributes) {
                /** @type {?} */
                var configValue = config[configAttributes[attribute]];
                if (!configValue) {
                    continue; // don't waste time reading the attribute
                }
                if (!this.el.getAttribute(attribute)) {
                    // attribute isn't set - apply the default config value
                    /** @type {?} */
                    var value = (typeof configValue === "number") ? configValue.toString() : configValue;
                    this.el.setAttribute(attribute, value);
                }
            }
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        LaddaDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (!this.ladda) {
                return; // needed since ngOnChanges is called before ngOnInit
            }
            if (changes.loading) {
                this.updateLadda(changes.loading.previousValue);
            }
            if (changes.disabled) {
                this.updateDisabled();
            }
        };
        /**
         * @return {?}
         */
        LaddaDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.ladda = ladda.create(this.el);
            // if the initial loading value isn't false, a timeout of 0 ms
            // is necessary for the calculated spinner size to be correct.
            setTimeout((/**
             * @return {?}
             */
            function () { _this.updateLadda(false); }), 0);
        };
        /**
         * @return {?}
         */
        LaddaDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.ladda) {
                this.ladda.remove();
            }
        };
        /**
         * @private
         * @param {?} previousValue
         * @return {?}
         */
        LaddaDirective.prototype.updateLadda = /**
         * @private
         * @param {?} previousValue
         * @return {?}
         */
        function (previousValue) {
            /** @type {?} */
            var loading = typeof this.loading === 'number' || !!this.loading;
            /** @type {?} */
            var wasLoading = typeof previousValue === 'number' || !!previousValue;
            if (!loading) {
                if (wasLoading) {
                    this.ladda.stop();
                }
                return this.updateDisabled();
            }
            if (!wasLoading) {
                this.ladda.start();
            }
            if (typeof this.loading === 'number') {
                this.ladda.setProgress(this.loading);
            }
        };
        /**
         * @private
         * @return {?}
         */
        LaddaDirective.prototype.updateDisabled = /**
         * @private
         * @return {?}
         */
        function () {
            this.el.disabled = this.disabled;
        };
        LaddaDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: '[ladda]'
                    },] }
        ];
        /** @nocollapse */
        LaddaDirective.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: LaddaConfigArgs, decorators: [{ type: core.Inject, args: [LaddaConfig,] }, { type: core.Optional }] }
        ]; };
        LaddaDirective.propDecorators = {
            loading: [{ type: core.Input, args: ['ladda',] }],
            disabled: [{ type: core.Input }]
        };
        return LaddaDirective;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LaddaModule = /** @class */ (function () {
        function LaddaModule() {
        }
        /**
         * @param {?} config
         * @return {?}
         */
        LaddaModule.forRoot = /**
         * @param {?} config
         * @return {?}
         */
        function (config) {
            return {
                ngModule: LaddaModule,
                providers: [
                    { provide: LaddaConfig, useValue: config }
                ]
            };
        };
        LaddaModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [LaddaDirective],
                        exports: [LaddaDirective],
                    },] }
        ];
        return LaddaModule;
    }());

    exports.LaddaConfig = LaddaConfig;
    exports.LaddaConfigArgs = LaddaConfigArgs;
    exports.LaddaDirective = LaddaDirective;
    exports.LaddaModule = LaddaModule;
    exports.configAttributes = configAttributes;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=angular2-ladda.umd.js.map
