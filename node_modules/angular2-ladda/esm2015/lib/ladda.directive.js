/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Optional, Inject } from '@angular/core';
import { LaddaConfig, LaddaConfigArgs, configAttributes } from './ladda-config';
import { create as createLadda } from 'ladda';
export class LaddaDirective {
    /**
     * @param {?} el
     * @param {?} config
     */
    constructor(el, config) {
        this.el = el.nativeElement;
        if (!config) {
            return;
        }
        // apply default styles if they aren't overwritten by an attribute
        for (let attribute in configAttributes) {
            /** @type {?} */
            let configValue = config[configAttributes[attribute]];
            if (!configValue) {
                continue; // don't waste time reading the attribute
            }
            if (!this.el.getAttribute(attribute)) {
                // attribute isn't set - apply the default config value
                /** @type {?} */
                let value = (typeof configValue === "number") ? configValue.toString() : configValue;
                this.el.setAttribute(attribute, value);
            }
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (!this.ladda) {
            return; // needed since ngOnChanges is called before ngOnInit
        }
        if (changes.loading) {
            this.updateLadda(changes.loading.previousValue);
        }
        if (changes.disabled) {
            this.updateDisabled();
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.ladda = createLadda(this.el);
        // if the initial loading value isn't false, a timeout of 0 ms
        // is necessary for the calculated spinner size to be correct.
        setTimeout((/**
         * @return {?}
         */
        () => { this.updateLadda(false); }), 0);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.ladda) {
            this.ladda.remove();
        }
    }
    /**
     * @private
     * @param {?} previousValue
     * @return {?}
     */
    updateLadda(previousValue) {
        /** @type {?} */
        let loading = typeof this.loading === 'number' || !!this.loading;
        /** @type {?} */
        let wasLoading = typeof previousValue === 'number' || !!previousValue;
        if (!loading) {
            if (wasLoading) {
                this.ladda.stop();
            }
            return this.updateDisabled();
        }
        if (!wasLoading) {
            this.ladda.start();
        }
        if (typeof this.loading === 'number') {
            this.ladda.setProgress(this.loading);
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateDisabled() {
        this.el.disabled = this.disabled;
    }
}
LaddaDirective.decorators = [
    { type: Directive, args: [{
                selector: '[ladda]'
            },] }
];
/** @nocollapse */
LaddaDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: LaddaConfigArgs, decorators: [{ type: Inject, args: [LaddaConfig,] }, { type: Optional }] }
];
LaddaDirective.propDecorators = {
    loading: [{ type: Input, args: ['ladda',] }],
    disabled: [{ type: Input }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    LaddaDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    LaddaDirective.prototype.ladda;
    /** @type {?} */
    LaddaDirective.prototype.loading;
    /** @type {?} */
    LaddaDirective.prototype.disabled;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFkZGEuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhcjItbGFkZGEvIiwic291cmNlcyI6WyJsaWIvbGFkZGEuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQStDLFFBQVEsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUgsT0FBTyxFQUFDLFdBQVcsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RSxPQUFPLEVBQUMsTUFBTSxJQUFJLFdBQVcsRUFBYyxNQUFNLE9BQU8sQ0FBQztBQU96RCxNQUFNLE9BQU8sY0FBYzs7Ozs7SUFPdkIsWUFBWSxFQUFjLEVBQW1DLE1BQXVCO1FBQ2hGLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxDQUFDLGFBQWEsQ0FBQztRQUUzQixJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ1QsT0FBTztTQUNWO1FBRUQsa0VBQWtFO1FBQ2xFLEtBQUssSUFBSSxTQUFTLElBQUksZ0JBQWdCLEVBQUU7O2dCQUNoQyxXQUFXLEdBQUcsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRXJELElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQ2QsU0FBUyxDQUFDLHlDQUF5QzthQUN0RDtZQUVELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsRUFBRTs7O29CQUU5QixLQUFLLEdBQUcsQ0FBQyxPQUFPLFdBQVcsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXO2dCQUNwRixJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDMUM7U0FDSjtJQUNMLENBQUM7Ozs7O0lBRUQsV0FBVyxDQUFDLE9BQXNCO1FBQzlCLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ2IsT0FBTyxDQUFDLHFEQUFxRDtTQUNoRTtRQUVELElBQUksT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUNqQixJQUFJLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7U0FDbkQ7UUFFRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUU7WUFDbEIsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDO1NBQ3pCO0lBQ0wsQ0FBQzs7OztJQUVELFFBQVE7UUFDSixJQUFJLENBQUMsS0FBSyxHQUFHLFdBQVcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUM7UUFFbEMsOERBQThEO1FBQzlELDhEQUE4RDtRQUM5RCxVQUFVOzs7UUFBQyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQztTQUN2QjtJQUNMLENBQUM7Ozs7OztJQUVPLFdBQVcsQ0FBQyxhQUF5Qjs7WUFDckMsT0FBTyxHQUFZLE9BQU8sSUFBSSxDQUFDLE9BQU8sS0FBSyxRQUFRLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPOztZQUNyRSxVQUFVLEdBQVksT0FBTyxhQUFhLEtBQUssUUFBUSxJQUFJLENBQUMsQ0FBQyxhQUFhO1FBRTlFLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDVixJQUFJLFVBQVUsRUFBRTtnQkFDWixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ3JCO1lBRUQsT0FBTyxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUM7U0FDaEM7UUFFRCxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2IsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQztTQUN0QjtRQUVELElBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxLQUFLLFFBQVEsRUFBRTtZQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDeEM7SUFDTCxDQUFDOzs7OztJQUVPLGNBQWM7UUFDbEIsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUNyQyxDQUFDOzs7WUFwRkosU0FBUyxTQUFDO2dCQUNQLFFBQVEsRUFBRSxTQUFTO2FBQ3RCOzs7O1lBUmtCLFVBQVU7WUFDUixlQUFlLHVCQWVILE1BQU0sU0FBQyxXQUFXLGNBQUcsUUFBUTs7O3NCQUh6RCxLQUFLLFNBQUMsT0FBTzt1QkFDYixLQUFLOzs7Ozs7O0lBSk4sNEJBQThCOzs7OztJQUM5QiwrQkFBMkI7O0lBRTNCLGlDQUFvQzs7SUFDcEMsa0NBQTJCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIElucHV0LCBPbkluaXQsIE9uRGVzdHJveSwgT25DaGFuZ2VzLCBTaW1wbGVDaGFuZ2VzLCBPcHRpb25hbCwgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtMYWRkYUNvbmZpZywgTGFkZGFDb25maWdBcmdzLCBjb25maWdBdHRyaWJ1dGVzfSBmcm9tICcuL2xhZGRhLWNvbmZpZyc7XHJcbmltcG9ydCB7Y3JlYXRlIGFzIGNyZWF0ZUxhZGRhLCBMYWRkYUJ1dHRvbn0gZnJvbSAnbGFkZGEnO1xyXG5cclxuZXhwb3J0IHR5cGUgbGFkZGFWYWx1ZSA9IGJvb2xlYW4gfCBudW1iZXIgfCB1bmRlZmluZWQgfCBudWxsO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tsYWRkYV0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMYWRkYURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95LCBPbkNoYW5nZXMge1xyXG4gICAgcHJpdmF0ZSBlbDogSFRNTEJ1dHRvbkVsZW1lbnQ7XHJcbiAgICBwcml2YXRlIGxhZGRhOiBMYWRkYUJ1dHRvbjtcclxuXHJcbiAgICBASW5wdXQoJ2xhZGRhJykgbG9hZGluZzogbGFkZGFWYWx1ZTtcclxuICAgIEBJbnB1dCgpIGRpc2FibGVkOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGVsOiBFbGVtZW50UmVmLCBASW5qZWN0KExhZGRhQ29uZmlnKSBAT3B0aW9uYWwoKSBjb25maWc6IExhZGRhQ29uZmlnQXJncykge1xyXG4gICAgICAgIHRoaXMuZWwgPSBlbC5uYXRpdmVFbGVtZW50O1xyXG5cclxuICAgICAgICBpZiAoIWNvbmZpZykge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBhcHBseSBkZWZhdWx0IHN0eWxlcyBpZiB0aGV5IGFyZW4ndCBvdmVyd3JpdHRlbiBieSBhbiBhdHRyaWJ1dGVcclxuICAgICAgICBmb3IgKGxldCBhdHRyaWJ1dGUgaW4gY29uZmlnQXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICBsZXQgY29uZmlnVmFsdWUgPSBjb25maWdbY29uZmlnQXR0cmlidXRlc1thdHRyaWJ1dGVdXTtcclxuXHJcbiAgICAgICAgICAgIGlmICghY29uZmlnVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBkb24ndCB3YXN0ZSB0aW1lIHJlYWRpbmcgdGhlIGF0dHJpYnV0ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuZWwuZ2V0QXR0cmlidXRlKGF0dHJpYnV0ZSkpIHtcclxuICAgICAgICAgICAgICAgIC8vIGF0dHJpYnV0ZSBpc24ndCBzZXQgLSBhcHBseSB0aGUgZGVmYXVsdCBjb25maWcgdmFsdWVcclxuICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9ICh0eXBlb2YgY29uZmlnVmFsdWUgPT09IFwibnVtYmVyXCIpID8gY29uZmlnVmFsdWUudG9TdHJpbmcoKSA6IGNvbmZpZ1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbC5zZXRBdHRyaWJ1dGUoYXR0cmlidXRlLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xyXG4gICAgICAgIGlmICghdGhpcy5sYWRkYSkge1xyXG4gICAgICAgICAgICByZXR1cm47IC8vIG5lZWRlZCBzaW5jZSBuZ09uQ2hhbmdlcyBpcyBjYWxsZWQgYmVmb3JlIG5nT25Jbml0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoY2hhbmdlcy5sb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMudXBkYXRlTGFkZGEoY2hhbmdlcy5sb2FkaW5nLnByZXZpb3VzVmFsdWUpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGNoYW5nZXMuZGlzYWJsZWQpIHtcclxuICAgICAgICAgICAgdGhpcy51cGRhdGVEaXNhYmxlZCgpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLmxhZGRhID0gY3JlYXRlTGFkZGEodGhpcy5lbCk7XHJcblxyXG4gICAgICAgIC8vIGlmIHRoZSBpbml0aWFsIGxvYWRpbmcgdmFsdWUgaXNuJ3QgZmFsc2UsIGEgdGltZW91dCBvZiAwIG1zXHJcbiAgICAgICAgLy8gaXMgbmVjZXNzYXJ5IGZvciB0aGUgY2FsY3VsYXRlZCBzcGlubmVyIHNpemUgdG8gYmUgY29ycmVjdC5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgdGhpcy51cGRhdGVMYWRkYShmYWxzZSk7IH0sIDApO1xyXG4gICAgfVxyXG5cclxuICAgIG5nT25EZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLmxhZGRhKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFkZGEucmVtb3ZlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlTGFkZGEocHJldmlvdXNWYWx1ZTogbGFkZGFWYWx1ZSk6IHZvaWQge1xyXG4gICAgICAgIGxldCBsb2FkaW5nOiBib29sZWFuID0gdHlwZW9mIHRoaXMubG9hZGluZyA9PT0gJ251bWJlcicgfHwgISF0aGlzLmxvYWRpbmc7XHJcbiAgICAgICAgbGV0IHdhc0xvYWRpbmc6IGJvb2xlYW4gPSB0eXBlb2YgcHJldmlvdXNWYWx1ZSA9PT0gJ251bWJlcicgfHwgISFwcmV2aW91c1ZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoIWxvYWRpbmcpIHtcclxuICAgICAgICAgICAgaWYgKHdhc0xvYWRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFkZGEuc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVEaXNhYmxlZCgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF3YXNMb2FkaW5nKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGFkZGEuc3RhcnQoKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5sb2FkaW5nID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICB0aGlzLmxhZGRhLnNldFByb2dyZXNzKHRoaXMubG9hZGluZyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgdXBkYXRlRGlzYWJsZWQoKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5lbC5kaXNhYmxlZCA9IHRoaXMuZGlzYWJsZWQ7XHJcbiAgICB9XHJcbn1cclxuIl19