{"version":3,"sources":["./src/app/views/forms/validation-forms/validation-forms.component.html","./src/app/views/forms/validation-forms/validation-forms-routing.module.ts","./src/app/views/forms/validation-forms/validation-forms.component.css","./src/app/views/forms/validation-forms/validation-forms.component.ts","./src/app/views/forms/validation-forms/validation-forms.module.ts","./src/app/views/forms/validation-forms/validation-forms.service.ts"],"names":[],"mappings":"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","file":"validation-forms-validation-forms-module.js","sourcesContent":["export default \"<div class=\\\"animated fadeIn\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\">\\n          <i class=\\\"icon-note\\\"></i> Form Validation\\n          <a class=\\\"badge badge-danger\\\" href=\\\"https://coreui.io/pro/\\\">CoreUI Pro Component</a>\\n          <div class=\\\"card-header-actions\\\">\\n            <a class=\\\"card-header-action\\\" href=\\\"https://angular.io/guide/form-validation\\\" target=\\\"_blank\\\">\\n              <small class=\\\"text-muted\\\">docs</small>\\n            </a>\\n          </div>\\n        </div>\\n        <div class=\\\"card-body\\\">Angular Form Validation\\n          <hr>\\n          <div class=\\\"row\\\">\\n            <div class=\\\"col-md-6\\\">\\n              <h6>Simple Form</h6>\\n              <form [formGroup]=\\\"simpleForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\" class=\\\"needs-validation\\\">\\n                <div class=\\\"form-group\\\">\\n                  <label class=\\\"col-form-label\\\" for=\\\"firstName\\\">First name</label>\\n                  <input class=\\\"form-control\\\"\\n                         id=\\\"firstName\\\"\\n                         type=\\\"text\\\"\\n                         formControlName=\\\"firstName\\\"\\n                         placeholder=\\\"First name\\\"\\n                         autocomplete=\\\"given-name\\\"\\n                         required\\n                         autofocus\\n                         [ngClass]=\\\"{ 'is-invalid': submitted && f.firstName.errors, 'is-valid': f.firstName.touched && !f.firstName.errors }\\\" />\\n                  <div *ngIf=\\\"submitted && f['firstName'].errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['firstName'].errors.required\\\">First Name is required</div>\\n                  </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <label class=\\\"col-form-label\\\" for=\\\"lastName\\\">Last name</label>\\n                  <input class=\\\"form-control\\\"\\n                         id=\\\"lastName\\\"\\n                         type=\\\"text\\\"\\n                         formControlName=\\\"lastName\\\"\\n                         placeholder=\\\"Last name\\\"\\n                         autocomplete=\\\"family-name\\\"\\n                         required\\n                         [ngClass]=\\\"{ 'is-invalid': submitted && f.lastName.errors, 'is-valid': f.lastName.touched && !f.lastName.errors }\\\" />\\n                  <div *ngIf=\\\"submitted && f['lastName'].errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['lastName'].errors.required\\\">Last Name is required</div>\\n                  </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <label class=\\\"col-form-label\\\" for=\\\"username\\\">Username</label>\\n                  <input class=\\\"form-control\\\"\\n                         id=\\\"username\\\"\\n                         type=\\\"text\\\"\\n                         formControlName=\\\"username\\\"\\n                         placeholder=\\\"Username\\\"\\n                         autocomplete=\\\"username\\\"\\n                         required\\n                         [ngClass]=\\\"{ 'is-invalid': submitted && f.username.errors, 'is-valid': f.username.touched && !f.username.errors }\\\" />\\n                  <div *ngIf=\\\"submitted && simpleForm.controls['username'].errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['username'].errors.required\\\">Username is required</div>\\n                    <div *ngIf=\\\"f['username'].errors.minlength\\\">{{formErrors.username.minLength}}</div>\\n                  </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <label class=\\\"col-form-label\\\" for=\\\"email\\\">Email</label>\\n                  <input class=\\\"form-control\\\"\\n                         id=\\\"email\\\"\\n                         type=\\\"text\\\"\\n                         formControlName=\\\"email\\\"\\n                         placeholder=\\\"Email\\\"\\n                         autocomplete=\\\"email\\\"\\n                         required\\n                         [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors, 'is-valid': f.email.touched && !f.email.errors }\\\" />\\n                  <div *ngIf=\\\"submitted && f['email'].errors\\\" class=\\\"invalid-feedback\\\">\\n                    <div *ngIf=\\\"f['email'].errors.required\\\">Email is required</div>\\n                    <div *ngIf=\\\"f['email'].errors.email\\\">{{formErrors.email.email}}</div>\\n                  </div>\\n                </div>\\n                <div class=\\\"row\\\">\\n                  <div class=\\\"form-group col-md-6\\\">\\n                    <label class=\\\"col-form-label\\\" for=\\\"password\\\">Password</label>\\n                    <input class=\\\"form-control\\\"\\n                           id=\\\"password\\\"\\n                           type=\\\"password\\\"\\n                           formControlName=\\\"password\\\"\\n                           placeholder=\\\"Password\\\"\\n                           autocomplete=\\\"new-password\\\"\\n                           required\\n                           [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors, 'is-valid': f.password.touched && !f.password.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && f['password'].errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['password'].errors.required\\\">Password is required</div>\\n                      <div *ngIf=\\\"f['password'].errors.minlength\\\">{{formErrors.password.minLength}}</div>\\n                      <div *ngIf=\\\"f['password'].errors.pattern\\\">{{formErrors.password.pattern}}</div>\\n                    </div>\\n                  </div>\\n                  <div class=\\\"form-group col-md-6\\\">\\n                    <label class=\\\"col-form-label\\\" for=\\\"confirmPassword\\\">Confirm password</label>\\n                    <input class=\\\"form-control\\\"\\n                           id=\\\"confirmPassword\\\"\\n                           type=\\\"password\\\"\\n                           formControlName=\\\"confirmPassword\\\"\\n                           placeholder=\\\"Confirm password\\\"\\n                           autocomplete=\\\"new-password\\\"\\n                           required\\n                           [ngClass]=\\\"{ 'is-invalid': submitted && simpleForm.errors, 'is-valid': f.confirmPassword.touched && !simpleForm.errors }\\\" />\\n                    <div *ngIf=\\\"submitted && simpleForm.errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"simpleForm.errors['passwordMismatch']\\\">{{formErrors.confirmPassword.passwordMismatch}}</div>\\n                    </div>\\n                  </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <div class=\\\"custom-control custom-checkbox\\\">\\n                    <input type=\\\"checkbox\\\"\\n                           class=\\\"custom-control-input\\\"\\n                           id=\\\"accept\\\"\\n                           formControlName=\\\"accept\\\"\\n                           required\\n                           [ngClass]=\\\"{ 'is-invalid': submitted && f.accept.errors, 'is-valid': !f.accept.errors }\\\" />\\n                    <label class=\\\"custom-control-label\\\" for=\\\"accept\\\">I accept the terms of use</label>\\n                    <div *ngIf=\\\"submitted && f['accept'].errors\\\" class=\\\"invalid-feedback\\\">\\n                      <div *ngIf=\\\"f['accept'].errors.required\\\">You have to accept our Terms and Conditions</div>\\n                    </div>\\n                  </div>\\n                </div>\\n                <div class=\\\"form-group\\\">\\n                  <button class=\\\"btn btn-primary mr-1\\\" type=\\\"submit\\\" [disabled]=\\\"simpleForm.pristine || simpleForm.invalid\\\">Submit</button>\\n                  <button class=\\\"btn btn-success mr-1\\\" type=\\\"submit\\\" [disabled]=\\\"simpleForm.valid\\\">Validate</button>\\n                  <button class=\\\"btn btn-danger\\\" type=\\\"reset\\\" [disabled]=\\\"simpleForm.pristine && !submitted\\\" (click)=\\\"onReset()\\\">Reset</button>\\n                </div>\\n              </form>\\n            </div>\\n            <div class=\\\"col-md-6\\\">\\n              <div class=\\\"card bg-secondary\\\" [ngClass]=\\\"{ 'bg-info' : simpleForm.valid }\\\">\\n                <div class=\\\"card-body\\\">\\n                  <pre>Value: <code>{{ simpleForm.value | json }}</code></pre>\\n                  <p>\\n                    Status: {{ simpleForm.status }}\\n                  </p>\\n                  <p>\\n                    Errors: {{ simpleForm.errors | json }}\\n                  </p>\\n                </div>\\n              </div>\\n             </div>\\n          </div>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ValidationFormsComponent } from './validation-forms.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ValidationFormsComponent,\n    data: {\n      title: 'Form Validation'\n    }\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ValidationFormsRoutingModule {}\n","export default \".btn:disabled {\\n  cursor: auto;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdmlld3MvZm9ybXMvdmFsaWRhdGlvbi1mb3Jtcy92YWxpZGF0aW9uLWZvcm1zLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFDRSxZQUFZO0FBQ2QiLCJmaWxlIjoic3JjL2FwcC92aWV3cy9mb3Jtcy92YWxpZGF0aW9uLWZvcm1zL3ZhbGlkYXRpb24tZm9ybXMuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5idG46ZGlzYWJsZWQge1xuICBjdXJzb3I6IGF1dG87XG59XG4iXX0= */\"","import { Component } from '@angular/core';\nimport {FormGroup, FormBuilder, Validators, FormControl, AbstractControl, FormGroupName} from '@angular/forms';\n\nimport { ValidatorFn, ValidationErrors } from '@angular/forms';\nimport { ValidationFormsService } from './validation-forms.service';\nimport {FormsComponent} from '../../base/forms.component';\n\n/** passwords must match - custom validator */\nexport const confirmPasswordValidator: ValidatorFn = (control: FormGroup): ValidationErrors | null => {\n  const password = control.get('password');\n  const confirm = control.get('confirmPassword');\n  return password && confirm && password.value === confirm.value ? null : { 'passwordMismatch': true };\n};\n\n@Component({\n  templateUrl: './validation-forms.component.html',\n  styleUrls: ['./validation-forms.component.css'],\n  providers: [ ValidationFormsService ]\n})\n\nexport class ValidationFormsComponent {\n  simpleForm: FormGroup;\n  submitted = false;\n  formErrors: any;\n\n  constructor(\n    private fb: FormBuilder,\n    public vf: ValidationFormsService\n  ) {\n    this.formErrors = this.vf.errorMessages;\n    this.createForm();\n  }\n\n  createForm() {\n    this.simpleForm = this.fb.group({\n      firstName: ['', [Validators.required]],\n      lastName: ['', [Validators.required]],\n      username: ['', [Validators.required, Validators.minLength(this.vf.formRules.usernameMin), Validators.pattern(this.vf.formRules.nonEmpty)] ],\n      email: ['', [Validators.required, Validators.email] ],\n      password: ['', [Validators.required, Validators.minLength(this.vf.formRules.passwordMin), Validators.pattern(this.vf.formRules.passwordPattern)] ],\n      confirmPassword: ['', [Validators.required] ],\n      accept: [false, [Validators.requiredTrue] ]\n    }, { validator: confirmPasswordValidator});\n  }\n\n  // convenience getter for easy access to form fields\n  get f() { return this.simpleForm.controls; }\n\n  onReset() {\n\n    this.submitted = false;\n    this.simpleForm.reset();\n\n  }\n\n  onSubmit() {\n\n    this.submitted = true;\n\n    // stop here if form is invalid\n    if (this.simpleForm.invalid) {\n      return;\n    }\n\n    // TODO: Use EventEmitter with form value\n    console.warn(this.simpleForm.value);\n    alert('SUCCESS!');\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n// Routing\nimport { ValidationFormsRoutingModule } from './validation-forms-routing.module';\n\nimport { ValidationFormsComponent } from './validation-forms.component';\n\n@NgModule({\n  declarations: [\n    ValidationFormsComponent\n  ],\n  imports: [\n    FormsModule,\n    CommonModule,\n    ReactiveFormsModule,\n    ValidationFormsRoutingModule\n  ],\n  providers: [],\n  bootstrap: [ValidationFormsComponent]\n})\nexport class ValidationFormsModule { }\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationFormsService {\n\n  errorMessages: any;\n\n  formRules = {\n    nonEmpty: '^[a-zA-Z0-9]+([_ -]?[a-zA-Z0-9])*$',\n    usernameMin: 5,\n    passwordMin: 6,\n    passwordPattern: '(?=.*\\\\d)(?=.*[a-z])(?=.*[A-Z]).{6,}'\n  };\n\n  formErrors = {\n    firstName: '',\n    lastName: '',\n    username: '',\n    email: '',\n    password: '',\n    confirmPassword: '',\n    accept: false,\n  };\n\n  constructor() {\n    this.errorMessages = {\n      firstName: {\n        required: 'First name is required',\n      },\n      lastName: {\n        required: 'Last name is required',\n      },\n      username: {\n        required: 'Username is required',\n        minLength: `'Username must be ${this.formRules.usernameMin} characters or more`\n      },\n      email: {\n        required: 'required',\n        email: 'Invalid email address',\n      },\n      password: {\n        required: 'Password is required',\n        pattern: 'Password must contain: numbers, uppercase and lowercase letters',\n        minLength: `Password must be at least ${this.formRules.passwordMin} characters`\n      },\n      confirmPassword: {\n        required: 'Password confirmation is required',\n        passwordMismatch: 'Passwords must match'\n      },\n      accept: {\n        requiredTrue: 'You have to accept our Terms and Conditions'\n      },\n    };\n  }\n}\n"],"sourceRoot":"webpack:///"}