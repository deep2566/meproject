{"version":3,"sources":["./src/app/views/client/client-add/client-add.component.html","./src/app/views/client/client-edit/client-edit.component.html","./src/app/views/client/client.component.html","./src/app/views/client/client-add/client-add.component.ts","./src/app/views/client/client-add/client-add.module.ts","./src/app/views/client/client-edit/client-edit.component.ts","./src/app/views/client/client-edit/collector-edit.module.ts","./src/app/views/client/client-routing.module.ts","./src/app/views/client/client.component.ts","./src/app/views/client/client.module.ts","./src/app/views/client/client.service.ts","./src/app/views/client/datafilterpipe.ts"],"names":[],"mappings":"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","file":"views-client-client-module.js","sourcesContent":["export default \"<div class=\\\"animated fadeIn\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\">\\n          <i class=\\\"icon-note\\\"></i> Add New Client\\n\\n          <div class=\\\"card-header-actions\\\">\\n             <button (click)=\\\"back()\\\" class=\\\"btn btn-block btn-info btn-sm\\\">Back</button>\\n          </div>\\n        </div>\\n          <div class=\\\"card-body col-md-8\\\">\\n            <form [formGroup]=\\\"angForm\\\" novalidate>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"name\\\" class=\\\"col-form-label\\\">Name</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" \\n                  formControlName=\\\"name\\\" \\n                  #name />\\n              </div>\\n              <div *ngIf=\\\"angForm.controls['name'].invalid && (angForm.controls['name'].dirty || angForm.controls['name'].touched)\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"angForm.controls['name'].errors.required\\\">\\n                  Name field is required.\\n                </div>\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"col-form-label\\\">Email</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" \\n                  formControlName=\\\"email\\\" \\n                  #email />\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"col-form-label\\\">Username</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" \\n                  formControlName=\\\"username\\\" \\n                  #username />\\n              </div>\\n              <div *ngIf=\\\"angForm.controls['username'].invalid && (angForm.controls['username'].dirty || angForm.controls['username'].touched)\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"angForm.controls['username'].errors.required\\\">\\n                  Username field is required.\\n                </div>\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"col-form-label\\\">Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" \\n                  formControlName=\\\"password\\\" \\n                  #password />\\n              </div>\\n              <div *ngIf=\\\"angForm.controls['password'].invalid && (angForm.controls['password'].dirty || angForm.controls['password'].touched)\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"angForm.controls['password'].errors.required\\\">\\n                  Password field is required.\\n                </div>\\n              </div>\\n\\n              <div *ngIf=\\\"angForm.controls['email'].invalid && (angForm.controls['email'].dirty || angForm.controls['email'].touched)\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"angForm.controls['email'].errors.required\\\">\\n                  Email field is required.\\n                </div>\\n                <div *ngIf=\\\"angForm.controls['email'].errors.email\\\">\\n                  Please enter valid email address.\\n                </div>\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"col-form-label\\\">Phone</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" \\n                  formControlName=\\\"phone\\\" \\n                  #phone />\\n              </div>\\n              <div *ngIf=\\\"angForm.controls['phone'].invalid && (angForm.controls['phone'].dirty || angForm.controls['phone'].touched)\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"angForm.controls['phone'].errors.required\\\">\\n                  Phone field is required.\\n                </div>\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"col-form-label\\\">Address</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" \\n                  formControlName=\\\"address\\\" \\n                  #address />\\n              </div>\\n              <div *ngIf=\\\"angForm.controls['address'].invalid && (angForm.controls['address'].dirty || angForm.controls['address'].touched)\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"angForm.controls['address'].errors.required\\\">\\n                  Address field is required.\\n                </div>\\n              </div>\\n\\n              <!-- <div class=\\\"row\\\">\\n                <div class=\\\"col-xs-12 col-12 col-md-6 form-group\\\">\\n                  <input type=\\\"text\\\"\\n                  class=\\\"form-control\\\"\\n                  [minDate]=\\\"minDate\\\"\\n                  [maxDate]=\\\"maxDate\\\"\\n                  #dp=\\\"bsDatepicker\\\"\\n                  bsDatepicker [(bsValue)]=\\\"bsValue\\\">\\n                </div>\\n              </div> -->\\n\\n              <div class=\\\"form-group\\\">\\n                  <button [ladda]='loading' (click) = \\\"add(name.value,email.value,phone.value,address.value,username.value,password.value)\\\"  type=\\\"submit\\\" class=\\\"btn btn-primary\\\"\\n                  [disabled]=\\\"angForm.pristine || angForm.invalid\\\" >\\n                  Submit\\n                  </button>\\n                  <button class=\\\"btn btn-danger\\\" type=\\\"reset\\\" >Reset</button>\\n              </div>\\n            </form>\\n          </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","export default \"<div class=\\\"animated fadeIn\\\">\\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-md-12\\\">\\n      <div class=\\\"card\\\">\\n        <div class=\\\"card-header\\\">\\n          <i class=\\\"icon-note\\\"></i> Client Edit\\n          <div class=\\\"card-header-actions\\\">\\n             <button (click)=\\\"back()\\\" class=\\\"btn btn-block btn-info btn-sm\\\">Back</button>\\n          </div>\\n        </div>\\n          <div class=\\\"card-body\\\">\\n            <form [formGroup]=\\\"angForm\\\" novalidate>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"name\\\" class=\\\"col-form-label\\\">Name</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" \\n                  formControlName=\\\"name\\\" \\n                  [(ngModel)] = \\\"collector.name\\\"\\n                  #name />\\n              </div>\\n              <div *ngIf=\\\"angForm.controls['name'].invalid && (angForm.controls['name'].dirty || angForm.controls['name'].touched)\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"angForm.controls['name'].errors.required\\\">\\n                  Name field is required.\\n                </div>\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"col-form-label\\\">Email</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" \\n                  formControlName=\\\"email\\\" \\n                  [(ngModel)] = \\\"collector.email\\\"\\n                  #email />\\n              </div>\\n              <div *ngIf=\\\"angForm.controls['email'].invalid && (angForm.controls['email'].dirty || angForm.controls['email'].touched)\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"angForm.controls['email'].errors.required\\\">\\n                  Email field is required.\\n                </div>\\n                <div *ngIf=\\\"angForm.controls['email'].errors.email\\\">\\n                  Please enter valid email address.\\n                </div>\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"col-form-label\\\">Phone</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" \\n                  formControlName=\\\"phone\\\" \\n                  [(ngModel)] = \\\"collector.phone\\\"\\n                  #phone />\\n              </div>\\n              <div *ngIf=\\\"angForm.controls['phone'].invalid && (angForm.controls['phone'].dirty || angForm.controls['phone'].touched)\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"angForm.controls['phone'].errors.required\\\">\\n                  Phone field is required.\\n                </div>\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label class=\\\"col-form-label\\\">Address</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" \\n                  formControlName=\\\"address\\\" \\n                  [(ngModel)] = \\\"collector.address\\\"\\n                  #address />\\n              </div>\\n              <div *ngIf=\\\"angForm.controls['address'].invalid && (angForm.controls['address'].dirty || angForm.controls['address'].touched)\\\" class=\\\"alert alert-danger\\\">\\n                <div *ngIf=\\\"angForm.controls['address'].errors.required\\\">\\n                  Address field is required.\\n                </div>\\n              </div>\\n\\n\\n              <div class=\\\"form-group\\\">\\n                  <button [ladda]='loading' (click) = \\\"update(name.value,email.value,phone.value,address.value)\\\" type=\\\"submit\\\" class=\\\"btn btn-primary\\\"\\n                  [disabled]=\\\"angForm.pristine || angForm.invalid\\\" >\\n                  Submit\\n                  </button>\\n                  <button class=\\\"btn btn-danger\\\" type=\\\"reset\\\" >Reset</button>\\n              </div>\\n            </form>\\n          </div>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","export default \"<toaster-container [toasterconfig]=\\\"toasterconfig\\\"></toaster-container> \\n<div class=\\\"animated fadeIn\\\">\\n  <div class=\\\"card\\\">\\n    <div class=\\\"card-header\\\">\\n      <i class=\\\"fa fa-align-justify\\\"></i> Clients\\n      <div class=\\\"card-header-actions\\\">\\n        <button class=\\\"btn btn-primary btn-sm active\\\" [routerLink]=\\\"['create']\\\">\\n          Add\\n        </button>\\n      </div>\\n    </div>\\n    <div class=\\\"card-body\\\">\\n      <div class=\\\"row mb-3\\\" *ngIf=\\\"!showSpinnner\\\">\\n        <div class=\\\"col-md-4 offset-md-8\\\">\\n          <div class=\\\"input-group\\\">\\n            <div class=\\\"input-group-prepend\\\">\\n              <span class=\\\"input-group-text\\\"><i class=\\\"fa fa-search\\\"></i></span>\\n            </div>\\n            <input type=\\\"text\\\" class=\\\"form-control\\\" [(ngModel)]=\\\"filterQuery\\\" placeholder=\\\"Search by name\\\"/>\\n          </div>\\n        </div>\\n      </div>\\n\\n      <div class=\\\"sk-wave\\\" *ngIf=\\\"showSpinnner\\\" >\\n        <div class=\\\"sk-rect sk-rect1\\\"></div>\\n        <div class=\\\"sk-rect sk-rect2\\\"></div>\\n        <div class=\\\"sk-rect sk-rect3\\\"></div>\\n        <div class=\\\"sk-rect sk-rect4\\\"></div>\\n        <div class=\\\"sk-rect sk-rect5\\\"></div>\\n      </div>\\n\\n      <table *ngIf=\\\"!showSpinnner\\\" class=\\\"table table-bordered table-striped table-hover table-responsive-lg\\\" [mfData]=\\\"data | dataFilter : filterQuery\\\" #mf=\\\"mfDataTable\\\" [mfRowsOnPage]=\\\"10\\\">\\n        <thead>\\n          <tr>\\n            <th style=\\\"width: 20%\\\">\\n              <mfDefaultSorter by=\\\"name\\\">Name</mfDefaultSorter>\\n            </th>\\n            <th style=\\\"width: 20%\\\">\\n              <mfDefaultSorter by=\\\"email\\\">Email</mfDefaultSorter>\\n            </th>\\n            <th style=\\\"width: 10%\\\">\\n              <mfDefaultSorter by=\\\"phone\\\">Phone</mfDefaultSorter>\\n            </th>\\n            <th style=\\\"width: 40%\\\">\\n              <mfDefaultSorter by=\\\"address\\\">Address</mfDefaultSorter>\\n            </th>\\n            <th style=\\\"width: 10%\\\">\\n              <mfDefaultSorter by=\\\"id_no\\\">Action</mfDefaultSorter>\\n            </th>\\n          </tr>\\n        </thead>\\n        <tbody>\\n          <tr *ngFor=\\\"let item of mf.data\\\" (click)=\\\"enableField(item.id)\\\">\\n            <td>{{item.name}}</td>\\n            <td>{{item.email}}</td>\\n            <td>{{item.phone}}</td>\\n            <td>{{ item.address}}</td>\\n            <td><a [routerLink]=\\\"['edit', item.id]\\\" class=\\\"btn btn-sm btn-primary active\\\">Edit</a></td>\\n          </tr>\\n        </tbody>\\n        <tfoot>\\n          <tr>\\n            <td colspan=\\\"5\\\">\\n              <mfBootstrapPaginator [rowsOnPageSet]=\\\"[5,10,15]\\\"></mfBootstrapPaginator>\\n            </td>\\n          </tr>\\n        </tfoot>\\n      </table>\\n\\n      <form (ngSubmit)=\\\"onSubmit()\\\" ngNativeValidate>\\n        <div class=\\\"card\\\">\\n          <div class=\\\"card-header\\\">\\n            Client Fee: \\n            <div class=\\\"card-header-actions\\\">\\n              <button [disabled]=\\\"isDisable\\\" [ladda]='feeSaveloader' type=\\\"submit\\\" class=\\\"btn btn-pill btn-block btn-primary active\\\">\\n                Save\\n              </button>\\n            </div>\\n          </div>\\n          <div class=\\\"card-body\\\">\\n            <table class=\\\"table table-bordered\\\"  *ngIf=\\\"!showChildSpinnner\\\">\\n              <thead>\\n                <tr>\\n                  <th>Start Amount</th>\\n                  <th>End Amount</th>\\n                  <th>Percentage(Without Legal:With Doc)</th>\\n                  <th>Percentage(Without Legal:Without Doc)</th>\\n                  <th>Percentage(With Legal:With Doc)</th>\\n                  <th>Percentage(With Legal:Without Doc)</th>\\n                </tr>\\n              </thead>\\n              <tbody>\\n                <tr *ngFor=\\\"let item of fields; let index = index\\\" >\\n                  <td>\\n                    <input [disabled]=\\\"isDisable\\\" required type=\\\"number\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\n                    [(ngModel)]=\\\"fields[index].start_amount\\\" class=\\\"form-control\\\"/></td>\\n                  <td>\\n                    <input [disabled]=\\\"isDisable\\\" required type=\\\"number\\\"\\n                     [ngModelOptions]=\\\"{standalone: true}\\\" [(ngModel)]=\\\"fields[index].end_amount\\\" class=\\\"form-control\\\"/>\\n                    </td>\\n                  <td>\\n                    <input [disabled]=\\\"isDisable\\\" required type=\\\"number\\\"\\n                     [ngModelOptions]=\\\"{standalone: true}\\\"  [(ngModel)]=\\\"fields[index].percentage_with_doc_without_legal\\\" class=\\\"form-control\\\"/>\\n                  </td>\\n                  <td>\\n                    <input [disabled]=\\\"isDisable\\\" required type=\\\"number\\\"\\n                     [ngModelOptions]=\\\"{standalone: true}\\\"  [(ngModel)]=\\\"fields[index].percentage_without_doc_without_legal\\\" class=\\\"form-control\\\"/>\\n                  </td>\\n                  <td>\\n                    <input [disabled]=\\\"isDisable\\\" required type=\\\"number\\\"\\n                     [ngModelOptions]=\\\"{standalone: true}\\\"  [(ngModel)]=\\\"fields[index].percentage_with_legal_with_doc\\\" class=\\\"form-control\\\"/>\\n                  </td>\\n                  <td>\\n                    <input [disabled]=\\\"isDisable\\\" required type=\\\"number\\\"\\n                     [ngModelOptions]=\\\"{standalone: true}\\\"  [(ngModel)]=\\\"fields[index].percentage_with_legal_without_doc\\\" class=\\\"form-control\\\"/>\\n                  </td>\\n                </tr>\\n\\n              </tbody>\\n            </table>\\n            <div class=\\\"sk-wave\\\" *ngIf=\\\"showChildSpinnner\\\" >\\n              <div class=\\\"sk-rect sk-rect1\\\"></div>\\n              <div class=\\\"sk-rect sk-rect2\\\"></div>\\n              <div class=\\\"sk-rect sk-rect3\\\"></div>\\n              <div class=\\\"sk-rect sk-rect4\\\"></div>\\n              <div class=\\\"sk-rect sk-rect5\\\"></div>\\n            </div>\\n          </div>\\n        </div>\\n      </form>\\n\\n\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit,ViewEncapsulation} from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\n\nimport { Router } from '@angular/router';\n\n\nimport {AlertService } from '../../notifications/alert.service'\nimport { ClientService } from '../client.service';\n\n\n@Component({\n  templateUrl: './client-add.component.html',\n  styleUrls: [\n    '../../../../../node_modules/ngx-bootstrap/datepicker/bs-datepicker.scss',\n    '../../../../scss/vendors/ng-select/ng-select.scss'\n  ],\n  providers: [ ClientService ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ClientAddComponent implements OnInit {\n  fields:any =[\n    {start_percentage:'',end_percentage:'',comission:''},\n    {start_percentage:'',end_percentage:'',comission:''},\n    {start_percentage:'',end_percentage:'',comission:''},\n    {start_percentage:'',end_percentage:'',comission:''},\n    {start_percentage:'',end_percentage:'',comission:''},\n\n  ];\n  \n  loading = false;\n  angForm: FormGroup;\n\n   // Datepicker\n\n\n \n   bsValue: Date = new Date();\n   bsValue2: Date = new Date();\n\n  constructor(private fb: FormBuilder,\n    private ps : ClientService,\n    private alertService: AlertService, \n    private router: Router\n    ) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.angForm = this.fb.group({\n      name: ['', Validators.required ],\n      email: ['', [Validators.required,Validators.email] ],\n      username: ['', Validators.required ],\n      password: ['', Validators.required ],\n      phone: ['', Validators.required ],\n      address: ['', Validators.required ]\n    });\n  }\n\n  add(name,email,phone,address,username,password) {\n    console.log('add call in component');\n    this.loading =true;\n    this.ps.add(name,email,phone,address,username,password)\n    .subscribe(data => {\n      this.loading = false;\n      this.alertService.success('Client has been added successfully.', true)\n      this.router.navigate(['/clients'])\n    });\n  }\n\n  ngOnInit() {\n    console.log('asdfsadf');\n  }\n\n  back(){\n    this.router.navigate(['/clients'])\n  }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// CollectorAdd\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\n\nimport { ClientAddComponent } from './client-add.component';\n\n// Routing\nimport { ToasterModule } from 'angular2-toaster';\nimport { LaddaModule } from 'angular2-ladda';\nimport { BsDatepickerModule } from 'ngx-bootstrap';\n//\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    ToasterModule,\n    LaddaModule,\n    BsDatepickerModule.forRoot()\n  ],\n  declarations: [\n    ClientAddComponent\n  ]\n})\nexport class ClientAddModule { }\n","import { Component, OnInit,ViewEncapsulation} from '@angular/core';\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\nimport { ClientService } from '../client.service';\nimport { Router,ActivatedRoute } from '@angular/router';\n\n\nimport {AlertService } from '../../notifications/alert.service'\n\n\n@Component({\n  templateUrl: './client-edit.component.html',\n  styleUrls: [\n    '../../../../../node_modules/ngx-bootstrap/datepicker/bs-datepicker.scss',\n    '../../../../scss/vendors/ng-select/ng-select.scss'\n  ],\n  encapsulation: ViewEncapsulation.None,\n  providers:[ClientService]\n})\nexport class ClientEditComponent implements OnInit {\n \n  loading = false;\n  angForm: FormGroup;\n\n   // Datepicker\n\n   bsValue: Date = new Date();\n   bsValue2: Date = new Date();\n\n  collector: any = {};\n  constructor(private route: ActivatedRoute,\n    private fb: FormBuilder,\n    private alertService: AlertService, \n    private router: Router,\n    private ps : ClientService\n    ) {\n    this.createForm();\n  }\n\n  createForm() {\n    this.angForm = this.fb.group({\n      name: ['', Validators.required ],\n      email: ['', [Validators.required,Validators.email] ],\n      phone: ['', Validators.required ],\n      address:['',Validators.required]\n      \n    });\n  }\n\n  update(name,email,phone,address,id) {\n    this.loading = true;\n    this.route.params.subscribe(params => {\n      this.ps.update(name,email,phone,address,params.id)\n      .subscribe(res => {\n        this.loading = false;\n        this.alertService.success('Client has been updated successfully.', true)\n        this.router.navigate(['/clients'])\n        this.loading = true;\n      });\n    });\n  }\n\n  ngOnInit() {\n    this.route.params.subscribe(params => {\n        this.ps.edit(params['id']).subscribe(res => {\n          this.collector = res;\n      });\n    });\n  }\n\n  back(){\n    this.router.navigate(['/clients'])\n  }\n\n}","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// ClientEdit\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule,ReactiveFormsModule } from '@angular/forms';\n\n// Routing\nimport { ToasterModule } from 'angular2-toaster';\nimport { LaddaModule } from 'angular2-ladda';\nimport { BsDatepickerModule } from 'ngx-bootstrap';\nimport { ClientEditComponent } from './client-edit.component'; \n//\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    ReactiveFormsModule,\n    ToasterModule,\n    LaddaModule,\n    BsDatepickerModule.forRoot()\n  ],\n  declarations:[ClientEditComponent]\n})\nexport class ClientEditModule { }\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ClientComponent } from './client.component';\nimport { ClientAddComponent } from './client-add/client-add.component';\nimport { ClientEditComponent } from './client-edit/client-edit.component';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ClientComponent,\n    data: {\n      title: 'Client'\n    }\n  },\n  {\n    path: 'create',\n    component: ClientAddComponent,\n    data: {\n      title: 'Client Add'\n    },\n\n  },\n  {\n    path: 'edit/:id',\n    component: ClientEditComponent,\n    data: {\n      title: 'Client Edit'\n    },\n    \n  },\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ClientRoutingModule {}\n","import { Component,ViewEncapsulation } from '@angular/core';\nimport { TableData, ClientService } from './client.service';\nimport { environment } from '../../../environments/environment';\nimport { ToasterModule, ToasterService, ToasterConfig } from 'angular2-toaster/angular2-toaster';\n\n@Component({\n  templateUrl: 'client.component.html',\n  styleUrls: ['../../../scss/vendors/toastr/toastr.scss','../../../../node_modules/ladda/dist/ladda-themeless.min.css'],\n  providers: [ ClientService,ToasterService ],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ClientComponent {\n\n  public toasterconfig: ToasterConfig =\n  new ToasterConfig({\n    tapToDismiss: true,\n    timeout: 5000\n  });\n\n  error: any;\n  public data: TableData;\n  public filterQuery = '';\n  public isDisable = true;\n  public currentId = '';\n  public showChildSpinnner= false;\n  public showSpinnner= false;\n  public feeSaveloader = false;\n\n  fields:any =[\n    {start_amount:'',end_amount:'',percentage_with_doc_without_legal:'',percentage_without_doc_without_legal:'',percentage_with_legal_with_doc:'',percentage_with_legal_without_doc:''},\n    {start_amount:'',end_amount:'',percentage_with_doc_without_legal:'',percentage_without_doc_without_legal:'',percentage_with_legal_with_doc:'',percentage_with_legal_without_doc:''},\n    {start_amount:'',end_amount:'',percentage_with_doc_without_legal:'',percentage_without_doc_without_legal:'',percentage_with_legal_with_doc:'',percentage_with_legal_without_doc:''}\n\n  ];\n\n  constructor(private toasterService: ToasterService,private ClientService: ClientService) {\n    this.showSpinnner = true;\n    this.ClientService.getData()\n      .subscribe(\n        (data: TableData) => {\n          setTimeout(() => {\n            this.showSpinnner = false;\n            this.data = [...data];\n            }, 100);\n        }, // success path\n        error => this.error = error // error path\n      );\n  }\n\n  public toInt(num: string) {\n    return +num;\n  }\n\n  public sortByWordLength = (a: any) => {\n    return a.name.length;\n  }\n\n  public getDate(regDate: string) {\n    const date = new Date(regDate);\n    return date.toLocaleDateString('en-US', {year: 'numeric', month: 'short', day: '2-digit'});\n  }\n\n  enableField(id){\n    console.log('sdf');\n    this.showChildSpinnner = true;\n    this.currentId = id;\n    this.isDisable =false;\n    this.ClientService.getFee(id)\n    .subscribe(\n      (response : any[]) => {\n        this.showChildSpinnner = false;\n        console.log(response);\n        if(response.length == 3){\n          this.fields = response;\n        }else{\n          this.fields = [\n            {start_amount:'',end_amount:'',percentage_with_doc_without_legal:'',percentage_without_doc_without_legal:'',percentage_with_legal_with_doc:'',percentage_with_legal_without_doc:''},\n            {start_amount:'',end_amount:'',percentage_with_doc_without_legal:'',percentage_without_doc_without_legal:'',percentage_with_legal_with_doc:'',percentage_with_legal_without_doc:''},\n            {start_amount:'',end_amount:'',percentage_with_doc_without_legal:'',percentage_without_doc_without_legal:'',percentage_with_legal_with_doc:'',percentage_with_legal_without_doc:''}\n        \n          ];\n        }\n       \n      }, // success path\n      error => this.error = error // error path\n    );\n  }\n\n  onSubmit(){\n    this.feeSaveloader = true;\n     this.ClientService.updateFee(this.currentId,this.fields).subscribe(\n       (data)=>{\n        this.feeSaveloader = false;\n         console.log(data);\n         this.toasterService.pop('success', 'Client Fee', 'Client Fee has been updated successfully.');\n       }\n     );\n    //window.alert(JSON.stringify(this.fields));\n    \n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n// Client\nimport { DataTableModule } from 'angular2-datatable';\nimport { HttpClientModule, HTTP_INTERCEPTORS } from '@angular/common/http';\nimport { DataFilterPipe } from './datafilterpipe';\nimport { FormsModule } from '@angular/forms';\n\nimport { ClientComponent } from './client.component';\n\n// Routing\nimport { ClientRoutingModule } from './client-routing.module';\nimport { ToasterModule } from 'angular2-toaster';\nimport { LaddaModule } from 'angular2-ladda';\nimport { ClientAddModule } from './client-add/client-add.module';\nimport { ClientEditModule } from './client-edit/collector-edit.module';\nimport { TokenInterceptor } from '../../token.interceptor';\n//\n@NgModule({\n  imports: [\n    ClientRoutingModule,\n    CommonModule,\n    DataTableModule,\n    FormsModule,\n    HttpClientModule,\n    ToasterModule,\n    LaddaModule,\n    ClientAddModule,\n    ClientEditModule\n  ],\n  declarations: [\n    ClientComponent,\n    DataFilterPipe\n  ],\n  providers:[{\n    provide: HTTP_INTERCEPTORS,\n    useClass: TokenInterceptor,\n    multi: true\n  }]\n})\nexport class ClientModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { throwError } from 'rxjs';\nimport { catchError, retry } from 'rxjs/operators';\nimport { environment } from '../../../environments/environment';\n\nexport interface UserData {\n  name: string;\n  email: string;\n  regDate: string;\n  city: string;\n  age: number;\n}\n\nexport interface TableData extends Array<UserData> {}\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n  uri           = environment.apiUrl+'client';\n  dataUrl       = environment.apiUrl+'clients';\n  clientFeeUrl  = environment.apiUrl+'clientfee';\n\n  constructor(private http: HttpClient) {}\n\n  getData() {\n    return this.http.get<TableData>(this.dataUrl)\n      .pipe(\n        retry(3), // retry a failed request up to 3 times\n        catchError(this.handleError) // then handle the error\n      );\n  }\n  getFee(id) {\n    return this.http.get(`${this.clientFeeUrl}/${id}`);\n  }\n\n  add(name,email,phone,address,username,password) {\n    const obj = {\n      name,email,phone,address,username,password\n    };\n    console.log(obj);\n    return this.http.post(`${this.uri}/add`, obj);\n  }\n\n  edit(id) {\n    return this\n            .http\n            .get(`${this.uri}/edit/${id}`);\n  }\n\n  update(name,email,phone,address,id) {\n      const obj = {\n        name,email,phone,address\n      };\n     return this\n        .http\n        .post(`${this.uri}/update/${id}`, obj);\n  }\n\n  delete(id) {\n    return this\n              .http\n              .get(`${this.uri}/delete/${id}`);\n  }\n\n  updateFee(id,fields){\n    console.log('check field');\n    console.log(fields);\n   return this\n      .http\n      .post(`${this.clientFeeUrl}/update/${id}`, fields);\n  }\n\n  private handleError(error: HttpErrorResponse) {\n    if (error.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      console.error('An error occurred:', error.error.message);\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      console.error(\n        `Backend returned code ${error.status}, ` +\n        `body was: ${error.error}`);\n    }\n    // return an observable with a user-facing error message\n    return throwError(\n      'Something bad happened; please try again later.');\n  }\n}\n","import * as _ from 'lodash';\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'dataFilter'\n})\nexport class DataFilterPipe implements PipeTransform {\n\n  transform(array: any[], query: string): any {\n    if (query) {\n      return _.filter(array, row => row.name.indexOf(query) > -1);\n    }\n    return array;\n  }\n}\n"],"sourceRoot":"webpack:///"}